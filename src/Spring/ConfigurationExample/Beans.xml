<?xml version = "1.0" encoding = "UTF-8"?>

<!--https://www.tutorialspoint.com/spring/event_handling_in_spring.htm-->

<!--
If you have too many beans having initialization and/or destroy methods with the same name, 
you don't need to declare init-method and destroy-method on each individual bean. 
Instead, the framework provides the flexibility to configure such situation using 
default-init-method and default-destroy-method attributes on the <beans> element as follows −
-->
<beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xmlns:context = "http://www.springframework.org/schema/context"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"
       default-init-method = "init" 
       default-destroy-method = "destroy"
>

    <!-- Turns on Annotation Based Configuration -->
    <context:annotation-config/>

    <!-- 
    example of using scope to create singleton, declaring initialize and destroy methods
    -->
    <bean id = "helloWorld" class = "Spring.Spring.HelloWorld" scope = "singleton" init-method="init" destroy-method = "destroy">
        <property name = "message1" value = "Hello World!"/>
        <property name = "message2" value = "Hello Second World!"/>
    </bean>
    
    <!-- Bean Definition Template
    You can create a Bean definition template, which can be used by other child bean definitions without putting much effort. 
    While defining a Bean Definition Template, you should not specify the class attribute and should specify abstract 
    attribute and should specify the abstract attribute with a value of true as shown in the following code snippet  -->
    <bean id = "beanTeamplate" abstract = "true">
        <property name = "message1" value = "Hello World!"/>
        <property name = "message2" value = "Hello Second World!"/>
        <property name = "message3" value = "Namaste India!"/>
    </bean>
    
    <bean id = "helloIndia" class = "Spring.Spring.HelloIndia" parent = "beanTeamplate">
        <property name = "message1" value = "Hello India!"/>
        <property name = "message3" value = "Namaste India!"/>
    </bean>
    
    <!-- Definition for textEditor bean using inner bean -->
    <bean id = "textEditor" class = "Spring.Spring.TextEditor">
        <property name = "spellChecker">
            <bean id = "spellChecker" class = "Spring.Spring.SpellChecker"/>
        </property>
    </bean>
    
    <!-- creating instance of BeanPostProcessor to implement custom instantiation logic -->
    <bean class = "Spring.Spring.InitHelloWorld" />
    
    
    
    <!-- Definition for javaCollection -->
   <bean id = "javaCollection" class = "Spring.Spring.JavaCollection">
       
       <!--
       If you need to pass a NULL value, then you can pass it as follows −
        <bean id = "..." class = "exampleBean">
           <property name = "email"><null/></property>
        </bean>
       -->
      
      <!-- results in a setAddressList(java.util.List) call -->
      <property name = "addressList">
         <list>
            <value>INDIA</value>
            <value>Pakistan</value>
            <value>USA</value>
            <value>USA</value>
         </list>
      </property>

      <!-- results in a setAddressSet(java.util.Set) call -->
      <property name = "addressSet">
         <set>
            <value>INDIA</value>
            <value>Pakistan</value>
            <value>USA</value>
            <value>USA</value>
         </set>
      </property>

      <!-- results in a setAddressMap(java.util.Map) call -->
      <property name = "addressMap">
         <map>
            <entry key = "1" value = "INDIA"/>
            <entry key = "2" value = "Pakistan"/>
            <entry key = "3" value = "USA"/>
            <entry key = "4" value = "USA"/>
         </map>
      </property>
      
      <!-- results in a setAddressProp(java.util.Properties) call -->
      <property name = "addressProp">
         <props>
            <prop key = "one">INDIA</prop>
            <prop key = "one">INDIA</prop>
            <prop key = "two">Pakistan</prop>
            <prop key = "three">USA</prop>
            <prop key = "four">USA</prop>
         </props>
      </property>
   </bean>
   
   <!--
   Injecting Bean References
The following Bean definition will help you understand how to inject bean references as one of the 
collection's element. Even you can mix references and values all together as shown in the following code snippet

<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    Bean Definition to handle references and values 
   <bean id = "..." class = "...">

     Passing bean reference  for java.util.List 
      <property name = "addressList">
         <list>
            <ref bean = "address1"/>
            <ref bean = "address2"/>
            <value>Pakistan</value>
         </list>
      </property>
      
      Passing bean reference  for java.util.Set 
      <property name = "addressSet">
         <set>
            <ref bean = "address1"/>
            <ref bean = "address2"/>
            <value>Pakistan</value>
         </set>
      </property>
      
       Passing bean reference  for java.util.Map 
      <property name = "addressMap">
         <map>
            <entry key = "one" value = "INDIA"/>
            <entry key = "two" value-ref = "address1"/>
            <entry key = "three" value-ref = "address2"/>
         </map>
      </property>
   </bean>

 </beans>
 To use the above bean definition, you need to define your setter methods in such a way that they should be able 
 to handle references as well.
    -->

</beans>